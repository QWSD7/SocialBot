import feedparser
import json
import asyncio
from datetime import datetime, timezone
from telegram import Bot
import aiohttp
from bs4 import BeautifulSoup
import os


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
RSS_URL = os.environ.get("RSS_URL")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
CHANNEL_ID = os.environ.get("CHANNEL_ID")
STATE_FILE = os.environ.get("STATE_FILE")

bot = Bot(token=TELEGRAM_TOKEN)


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
def load_last_posted():
    try:
        with open(STATE_FILE, "r") as f:
            return json.load(f)
    except:
        return None


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
def save_last_posted(link):
    with open(STATE_FILE, "w") as f:
        json.dump(link, f)


# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∑–∞–ø–∏—Å—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–µ–∫—É—â–∏—Ö —Å—É—Ç–æ–∫
def is_today(published_parsed):
    if not published_parsed:
        return False
    pub_date = datetime(*published_parsed[:6], tzinfo=timezone.utc)
    now = datetime.now(tz=timezone.utc)
    return pub_date.date() == now.date()


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏
async def fetch_article_text(url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å—é."
                html = await resp.text()
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}"

    soup = BeautifulSoup(html, "html.parser")
    blocks = soup.find_all(class_="topic-body__content-text")

    if not blocks:
        return "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏."

    result = ""
    for block in blocks:
        for a in block.find_all("a"):
            a.replace_with(a.get_text())  # –∑–∞–º–µ–Ω–∏—Ç—å <a> –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        clean_text = block.get_text(strip=False)
        result += clean_text + "\n\n"

    return result.strip()[:4000]  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è
async def fetch_and_post():
    last_posted_link = load_last_posted()
    feed = feedparser.parse(RSS_URL)

    today_entries = [
        entry for entry in feed.entries if is_today(entry.published_parsed)
    ]

    if not today_entries:
        print("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    sorted_entries = sorted(today_entries, key=lambda e: e.published_parsed)

    if last_posted_link is None:
        last_entry = sorted_entries[-1]
        article_text = await fetch_article_text(last_entry.link)
        message = (
            f"üì∞ <b>{last_entry.title}</b>\n\n{article_text}\n\nüîó {last_entry.link}"
        )
        await bot.send_message(chat_id=CHANNEL_ID, text=message, parse_mode="HTML")
        save_last_posted(last_entry.link)
        print("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫).")
        return

    # –ù–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    new_entries = []
    found = False
    for entry in sorted_entries:
        if found:
            new_entries.append(entry)
        elif entry.link == last_posted_link:
            found = True

    if not new_entries:
        print("–ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
        return

    for entry in new_entries:
        article_text = await fetch_article_text(entry.link)
        message = f"üì∞ <b>{entry.title}</b>\n\n{article_text}\n\nüîó {entry.link}"
        await bot.send_message(chat_id=CHANNEL_ID, text=message, parse_mode="HTML")
        save_last_posted(entry.link)
        print(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {entry.title}")


# –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –∑–∞–ø—É—Å–∫–∞
async def scheduler():
    while True:
        try:
            await fetch_and_post()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
        await asyncio.sleep(300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç


# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(scheduler())
